function set_calendar(e, t) {
    var a = $("#dtpc_property_id").val(),
        r = APP_URL + "/ajax-calender/" + a;
    $.ajax({
        url: r,
        data: {
            _token: $('meta[name="csrf-token"]').attr("content"),
            month: e,
            year: t,
        },
        type: "post",
        dataType: "json",
        success: function (e) {
            $("#calender-dv").html(e.calendar),
                $("#hotel_date_package").modal("hide");
        },
        error: function (e, t) {
            console.log("error");
        },
    });
}
function mapDropDownActive() {
    document.getElementById("search-drop-down").classList.toggle("sm-show"),
        $("#header-search-checkin").datepicker("show");
}
function page_loader_start() {
    $("body").prepend('<div id="preloader"></div>');
}
function page_loader_stop() {
    $("#preloader").fadeOut("slow", function () {
        $(this).remove();
    });
}
function modal_alert(e, t) {
    $("#alert_model").modal("show");
}
function myFunction() {
    var e = document.getElementById("myInput");
    e.select(),
        e.setSelectionRange(0, 99999),
        document.execCommand("copy"),
        (document.getElementById("copied").innerHTML = "Copied");
}
$(document).on("change", "#calendar_dropdown", function () {
    var e = $(this).val(),
        t = (e = e.split("-"))[0];
    set_calendar(e[1], t);
}),
    $(document).on("click", ".month-nav-next", function (e) {
        e.preventDefault();
        var t = $(this).attr("data-year");
        set_calendar($(this).attr("data-month"), t);
    }),
    $(document).on("click", ".month-nav-previous", function (e) {
        e.preventDefault();
        var t = $(this).attr("data-year");
        set_calendar($(this).attr("data-month"), t);
    }),
    $(document).on("keyup", "#header-search-form", function () {
        (autocomplete = new google.maps.places.Autocomplete(
            document.getElementById("header-search-form")
        )),
            google.maps.event.addListener(
                autocomplete,
                "place_changed",
                function () {
                    mapDropDownActive();
                }
            );
    }),
    $(document).on("keyup", "#sidenav-search-form", function () {
        (autocomplete = new google.maps.places.Autocomplete(
            document.getElementById("sidenav-search-form")
        )),
            google.maps.event.addListener(
                autocomplete,
                "place_changed",
                function () {
                    document
                        .getElementById("sidenav-search-drop-down")
                        .classList.toggle("sm-show"),
                        $("#sidenav-search-checkin").datepicker("show");
                }
            );
    }),
    $(document).on("keyup", "#front-search-field", function () {
        autocomplete = new google.maps.places.Autocomplete(
            document.getElementById("front-search-field")
        );
    }),
    $(document).on("keyup", "#location-search-google", function () {
        autocomplete = new google.maps.places.Autocomplete(
            document.getElementById("location-search-google")
        );
    }),
    $(document.body).on("click", ".date-package-modal", function () {
        $("#model-message").html("");
        var e = $(this).attr("id").split("-"),
            t = e[2],
            a = e[1],
            r = e[0],
            o = $(this).attr("data-price"),
            n = $(this).attr("data-status");
        t.length < 2 && (t = "0" + t);
        var c = t + "-" + a + "-" + r,
            s = $("#front_date_format_type").val();
        (c = $.datepicker.formatDate(s, $.datepicker.parseDate("dd-mm-yy", c))),
            $("#dtpc_start").val(c),
            $("#dtpc_end").val(c),
            $("#dtpc_price").val(o),
            $("#dtpc_status").val(n).change(),
            $("#dtpc_start").datepicker({
                dateFormat: $("#front_date_format_type").val(),
                onSelect: function (e) {
                    var t = $("#dtpc_start").val(),
                        a = $("#dtpc_end").val();
                    $("#error-dtpc-start").html(""),
                        $("#error-dtpc-end").html(""),
                        t > a &&
                            $("#error-dtpc-start").html(
                                "Start date not greater than end date."
                            );
                },
            }),
            $("#dtpc_end").datepicker({
                dateFormat: $("#front_date_format_type").val(),
                onSelect: function (e) {
                    var t = $("#dtpc_start").val(),
                        a = $("#dtpc_end").val();
                    $("#error-dtpc-start").html(""),
                        $("#error-dtpc-end").html(""),
                        t > a &&
                            $("#error-dtpc-end").html(
                                "End date not less than start date."
                            );
                },
            }),
            $("#price_btn").removeClass("disabled"),
            $("#price_spinner").addClass("d-none"),
            $("#price_next-text").text("Submit"),
            $("#hotel_date_package").modal();
    }),
    $(document.body).on("click", ".imporpt_calendar", function () {
        $("#import_calendar_package").modal();
    }),
    $(document.body).on("change", "#color", function () {
        "custom" == $("#color").val()
            ? $(".colorCustom").css("display", "block")
            : $(".colorCustom").css("display", "none");
    }),
    $(document.body).on("submit", "#icalendar_form", function (e) {
        e.preventDefault(),
            $("#error-icalendar-url").html(""),
            $("#error-icalendar-name").html("");
        var t = $("#icalendar_url").val(),
            a = $("#icalendar_name").val(),
            r = $("#icalendar_property_id").val(),
            o = $("#color").val(),
            n = $("#customcolor").val();
        "custom" == o
            ? "" == n &&
              $("#error-dtpc-customcolor").html("This field is required.")
            : (n = "none"),
            "" == t &&
                $("#error-icalendar-url").html("This field is required."),
            "" == a &&
                $("#error-icalendar-name").html("This field is required."),
            "" == o
                ? $("#error-dtpc-color").html("This field is required.")
                : $.ajax({
                      type: "POST",
                      url: APP_URL + "/ajax-icalender-import/" + r,
                      data: {
                          _token: $('meta[name="csrf-token"]').attr("content"),
                          url: t,
                          name: a,
                          property_id: r,
                          color: o,
                          customcolor: n,
                      },
                      success: function (e) {
                          if (1 != e.status)
                              return (
                                  $("#error-icalendar-url").html(e.error.url),
                                  $("#error-icalendar-name").html(e.error.name),
                                  $("#error-dtpc-customcolor").html(
                                      e.error.customcolor
                                  ),
                                  !1
                              );
                          $("#icalendar-model-message").html(e.success_message),
                              $("#icalendar-model-message").removeClass(
                                  "d-none"
                              ),
                              $("#import_calendar_package").modal("hide");
                      },
                      error: function (e, t) {},
                  });
    }),
    $(document.body).on("click", "#export_icalendar", function () {
        $("#calendar_export_package").modal();
    }),
    $(document.body).on("submit", "#dtpc_form", function (e) {
        e.preventDefault(),
            $("#error-dtpc-start").html(""),
            $("#error-dtpc-end").html(""),
            $("#error-dtpc-price").html(""),
            $("#error-dtpc-status").html("");
        var t = $("#dtpc_start").val(),
            a = $("#dtpc_end").val(),
            r = $("#dtpc_price").val(),
            o = $("#dtpc_status").val(),
            n = $("#dtpc_property_id").val(),
            c = APP_URL + "/ajax-calender-price/" + n;
        "" == t && $("#error-dtpc-start").html("Start date not given."),
            "" == a && $("#error-dtpc-end").html("End date not given."),
            "" == r && $("#error-dtpc-price").html("Price not given."),
            "" == o && $("#error-dtpc-status").html("Status not select."),
            "" != t &&
                "" != a &&
                "" != r &&
                "" != o &&
                ($("#price_btn").addClass("disabled"),
                $("#price_spinner").removeClass("d-none"),
                $("#price_next-text").text("Submit.."),
                $.ajax({
                    type: "POST",
                    url: c,
                    data: {
                        _token: $('meta[name="csrf-token"]').attr("content"),
                        start_date: t,
                        end_date: a,
                        price: r,
                        status: o,
                    },
                    success: function (e) {
                        var t = $("#calendar_dropdown").val(),
                            a = (t = t.split("-"))[0];
                        set_calendar(t[1], a),
                            $("#model-message").append(
                                "Data save successfully"
                            ),
                            $("#model-message").removeClass("d-none");
                    },
                    error: function (e, t) {
                        console.log(t);
                    },
                }));
    }),
    (window.onclick = function (e) {
        if (
            !(
                e.target.matches("#search-map") ||
                e.target.matches(".sm-dropdown-content") ||
                $(e.target).parents(".sm-dropdown-content").length ||
                e.target.matches(".ui-state-default") ||
                e.target.matches(".ui-icon") ||
                e.target.matches(".ui-datepicker-month") ||
                e.target.matches(".ui-datepicker-year") ||
                e.target.matches(".month")
            )
        ) {
            var t,
                a = document.getElementsByClassName("sm-dropdown-content");
            for (t = 0; t < a.length; t++) {
                var r = a[t];
                r.classList.contains("sm-show") &&
                    r.classList.remove("sm-show");
            }
        }
    }),
    $(".search-form").submit(function (e) {
        var t = $("#header-search-checkin").val(),
            a = $("#header-search-checkout").val(),
            r = $("#header-search-guests").val(),
            o = $("#header-search-form").val().replace(" ", "+");
        (window.location.href =
            APP_URL +
            "/s?location=" +
            o +
            "&checkin=" +
            t +
            "&checkout=" +
            a +
            "&guest=" +
            r),
            e.preventDefault();
    }),
    $("#ok_id").on("click", function (e) {
        e.preventDefault(), console.log("hello");
    }),
    $("#front-search-form").submit(function (e) {
        e.preventDefault();
        var t = $("#startDate").val(),
            a = $("#endDate").val(),
            r = $("#front-search-guests").val(),
            o = $("#front-search-field").val().replace(" ", "+");
        (window.location.href =
            APP_URL +
            "/search?location=" +
            o +
            "&checkin=" +
            t +
            "&checkout=" +
            a +
            "&guest=" +
            r),
            e.preventDefault();
    }),
    $(".search-form").submit(function (e) {
        var t = $("#header-search-checkin").val(),
            a = $("#header-search-checkout").val(),
            r = $("#header-search-guests").val(),
            o = $("#header-search-form").val();
        if ("" == o) {
            (t = $("#sidenav-search-checkin").val()),
                (a = $("#sidenav-search-checkout").val()),
                (r = $("#sidenav-search-guests").val());
            o = $("#sidenav-search-form").val();
        }
        (c = o.replace(" ", "+")),
            (window.location.href =
                APP_URL +
                "/search?location=" +
                c +
                "&checkin=" +
                t +
                "&checkout=" +
                a +
                "&guest=" +
                r),
            e.preventDefault();
    }),
    $(".room-list-status").change(function () {
        var e = $(this).val(),
            t = $(this).attr("data-room-id");
        $.ajax({
            type: "POST",
            url: APP_URL + "/listing/" + t + "/update_status",
            data: { _token: "{{ csrf_token() }}", status: e },
            success: function () {
                location.reload();
            },
        });
    }),
    $("#message-form").submit(function (e) {
        e.preventDefault();
        var t = $("#message_text").val();
        "" != t &&
            $.ajax({
                type: "POST",
                url:
                    APP_URL +
                    "/messaging/qt_reply/" +
                    $("#reservation_id").val(),
                data: { _token: "{{ csrf_token() }}", message: t },
                success: function (e) {
                    $("#message-list").prepend(e);
                },
            });
    }),
    $("#host-message-form").submit(function (e) {
        e.preventDefault();
        var t = $("#message_text").val();
        "" != t &&
            $.ajax({
                type: "POST",
                url:
                    APP_URL +
                    "/messaging/qt_reply/" +
                    $("#reservation_id").val(),
                data: {
                    _token: "{{ csrf_token() }}",
                    message: t,
                    pricing_room_id: $("#pricing_room_id").val(),
                    pricing_checkin: $("#pricing_start_date").val(),
                    pricing_checkout: $("#pricing_end_date").val(),
                    pricing_guests: 1,
                    pricing_price: $("#pricing_price").val(),
                },
                success: function (e) {
                    $("#message-list").prepend(e);
                },
            });
    });

function autocomplete(inp, arr) {
    /*the autocomplete function takes two arguments,
        the text field element and an array of possible autocompleted values:*/
    var currentFocus;
    /*execute a function when someone writes in the text field:*/
    inp.addEventListener("input", function (e) {
        var a,
            b,
            i,
            val = this.value;
        /*close any already open lists of autocompleted values*/
        closeAllLists();
        if (!val) {
            return false;
        }
        currentFocus = -1;
        /*create a DIV element that will contain the items (values):*/
        a = document.createElement("DIV");
        a.setAttribute("id", this.id + "autocomplete-list");
        a.setAttribute("class", "autocomplete-items");
        /*append the DIV element as a child of the autocomplete container:*/
        this.parentNode.appendChild(a);
        /*for each item in the array...*/
        for (i = 0; i < arr.length; i++) {
            /*check if the item starts with the same letters as the text field value:*/
            if (
                arr[i].substr(0, val.length).toUpperCase() == val.toUpperCase()
            ) {
                /*create a DIV element for each matching element:*/
                b = document.createElement("DIV");
                /*make the matching letters bold:*/
                b.innerHTML =
                    "<strong>" + arr[i].substr(0, val.length) + "</strong>";
                b.innerHTML += arr[i].substr(val.length);
                /*insert a input field that will hold the current array item's value:*/
                b.innerHTML += "<input type='hidden' value='" + arr[i] + "'>";
                /*execute a function when someone clicks on the item value (DIV element):*/
                b.addEventListener("click", function (e) {
                    /*insert the value for the autocomplete text field:*/
                    inp.value = this.getElementsByTagName("input")[0].value;
                    /*close the list of autocompleted values,
                    (or any other open lists of autocompleted values:*/
                    closeAllLists();
                });
                a.appendChild(b);
            }
        }
    });
    /*execute a function presses a key on the keyboard:*/
    inp.addEventListener("keydown", function (e) {
        var x = document.getElementById(this.id + "autocomplete-list");
        if (x) x = x.getElementsByTagName("div");
        if (e.keyCode == 40) {
            /*If the arrow DOWN key is pressed,
              increase the currentFocus variable:*/
            currentFocus++;
            /*and and make the current item more visible:*/
            addActive(x);
        } else if (e.keyCode == 38) {
            //up
            /*If the arrow UP key is pressed,
              decrease the currentFocus variable:*/
            currentFocus--;
            /*and and make the current item more visible:*/
            addActive(x);
        } else if (e.keyCode == 13) {
            /*If the ENTER key is pressed, prevent the form from being submitted,*/
            e.preventDefault();
            if (currentFocus > -1) {
                /*and simulate a click on the "active" item:*/
                if (x) x[currentFocus].click();
            }
        }
    });
    function addActive(x) {
        /*a function to classify an item as "active":*/
        if (!x) return false;
        /*start by removing the "active" class on all items:*/
        removeActive(x);
        if (currentFocus >= x.length) currentFocus = 0;
        if (currentFocus < 0) currentFocus = x.length - 1;
        /*add class "autocomplete-active":*/
        x[currentFocus].classList.add("autocomplete-active");
    }
    function removeActive(x) {
        /*a function to remove the "active" class from all autocomplete items:*/
        for (var i = 0; i < x.length; i++) {
            x[i].classList.remove("autocomplete-active");
        }
    }
    function closeAllLists(elmnt) {
        /*close all autocomplete lists in the document,
          except the one passed as an argument:*/
        var x = document.getElementsByClassName("autocomplete-items");
        for (var i = 0; i < x.length; i++) {
            if (elmnt != x[i] && elmnt != inp) {
                x[i].parentNode.removeChild(x[i]);
            }
        }
    }
    /*execute a function when someone clicks in the document:*/
    document.addEventListener("click", function (e) {
        closeAllLists(e.target);
    });
}

/*initiate the autocomplete function on the "myInput" element, and pass along the countries array as possible autocomplete values:*/

autocomplete(document.getElementById("myInput"), allcities);

alert(allcities);
